import json
import copy

_REQUIRED_LABELS = ["name", "cpu", "memory_m"]
_EFFECT_MAP = {
    'NO_EXECUTE': 'NoExecute',
    'NO_SCHEDULE': 'NoSchedule',
    'PREFER_NO_SCHEDULE': 'PreferNoSchedule'
}

class GKEMachineDispatcher:
    def __init__(self, tf_json):
        """
        json is a dict or a str(in which case it is treated as a json file)
        """
        if not isinstance(tf_json, dict):
            with open(str(tf_json), 'r') as f:
                tf_json = json.load(f)
        self.tf_config = tf_json
        if "resource" not in self.tf_config or \
           "google_container_node_pool" not in self.tf_config["resource"]:
            raise KeyError("resource/google_container_node_pool is required in the json")
        self.node_pools = self.tf_config["resource"]["google_container_node_pool"]
        for k, v in self.node_pools.items():
            self._check_required_labels(k, v)

    def get_nodepools(self):
        """
        Returns a sorted list of all nodepools
        """
        return sorted(self.node_pools.keys())

    def get_nodepool(self, name):
        """
        Returns the terraform json entry of the nodepool with @name
        """
        if not name in self.node_pools:
            raise KeyError("Cannot find node pool {}, available:\n{}"
                           .format(name, ',\n'.join(self.get_nodepools())))
        return self.node_pools[name]

    def assign_to_nodepool(self,
                           process,
                           node_pool_name,
                           *,
                           process_group=None,
                           exclusive=True):
        """
        Assigns a symphony process to a machine on the specific node pool
        Args:
            exclusive: When true, claim all available resoruces on this node
                On gpu machines, claim resources for one gpu when
                applicable
        """
        if not node_pool_name in self.node_pools:
            raise KeyError("Cannot find node pool {}".format(node_pool_name))
        if process_group is None:
            process_group = process
        node_pool_di = self.node_pools[node_pool_name]

        np_labels = node_pool_di["node_config"]["labels"]
        name = np_labels["name"]
        cpu = np_labels["cpu"]
        memory_m = np_labels["memory_m"]

        # This selector selects the only nodepool
        process_group.node_selector("name", name)
        # Tolerations allow the process to be scheduled
        if "taint" in node_pool_di["node_config"]:
            for taint in node_pool_di["node_config"]["taint"]:
                taint = copy.copy(taint)
                if 'value' in taint:
                    taint['operator'] = 'Equal'
                if 'effect' in taint:
                    taint['effect'] = _EFFECT_MAP[taint['effect']]
                process_group.add_toleration(**taint)
        if "gpu_type" in np_labels:
            process_group.add_toleration(**{
                "effect": "NoSchedule",
                "key": "nvidia.com/gpu",
                "operator": "Exists"
                })
        if exclusive:
            # Exclusive by GPUS
            if 'gpu_count' in np_labels:
                num_gpus = np_labels['gpu_count']
            else:
                num_gpus = 1

            memory_str = '{}Mi'.format(int(memory_m / (num_gpus + 1)))
            cpu_share = (cpu - 0.6) / num_gpus
            cpu_share = float(int(cpu_share * 1000)) / 1000
            process.resource_request(cpu=cpu_share, memory=memory_str)
            if "gpu_count" in np_labels:
                process.resource_limit(gpu=1)

    def _check_required_labels(self, name, di):
        if "node_config" not in di:
            msg = "Missing field 'node_config' in declaration of nodepool {}. ".format(name)\
                  + "Is this json generated by cloudwise?"
            raise ValueError(msg)
        if "labels" not in di["node_config"]:
            msg = "Missing field 'node_config/labels' in declaration of nodepool {}. ".format(name)\
                  + "Is this json generated by cloudwise?"
            raise ValueError(msg)
        labels_di = di["node_config"]["labels"]
        for label in _REQUIRED_LABELS:
            if label not in labels_di:
                msg = "Missing field {} in labels for nodepool {}".format(label, name)\
                      + "Is this json generated by cloudwise?"
                raise ValueError(msg)

    def __repr__(self):
        return "{}, available nodepools:\n".format(str(type(self)))\
                + ',\n'.join(self.get_nodepools())
