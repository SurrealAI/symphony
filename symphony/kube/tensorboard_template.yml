# launches a pod that only displays tensorboard

{% macro volume_block() %}
volumes:
- name: fs
{% if FS_TYPE == 'emptyDir' %}
  emptyDir: {}
{% elif FS_TYPE == 'hostPath' %}
  hostPath:
    path: {{ FS_PATH_ON_SERVER }}
{% elif FS_TYPE == 'nfs' %}
  nfs:
    server: {{ FS_SERVER }}
    path: {{ FS_PATH_ON_SERVER }}
{% else %}
  {{ raise("unknown fs type, please check ~/.surreal.yml:fs.type") }}
{% endif %}
{% endmacro %}

# containers:
{% macro container_block(name, image, args, resource_request, resource_limit) %}
- name: {{ name }}
  image: {{ image }}
  imagePullPolicy: Always
  env:
  - name: my_node_name
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: my_pod_name
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: my_pod_namespace
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: my_pod_ip
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  volumeMounts:
  - name: fs
    mountPath: {{ FS_MOUNT_PATH }}
  args: {{ args }}
  {% if resource_request | length > 0 or resource_limit | length > 0 %}
  resources:
    {% if resource_request | length > 0 %}
    requests:
      {% for req_key, req_val in resource_request.items() %}
      {{req_key}}: {{req_val}}
      {% endfor %}
    {% endif %}
    {% if resource_limit | length > 0 and type in ['agent', 'learner']%}
    limits:
      {% for lim_key, lim_val in resource_limit.items() %}
      {{lim_key}}: {{lim_val}}
      {% endfor %}
    {% endif %}
  {% endif %}
{% endmacro %}

# node tainting to avoid system pods being scheduled to experiment nodes in autoscaling
{% set tolerations_block %}
tolerations:
- key: "surreal"
  operator: "Exists"
  effect: "NoExecute"
- key: "node.alpha.kubernetes.io/notready"
  operator: "Exists"
  effect: "NoExecute"
  tolerationSeconds: 3600
{% endset %}

---
# Cloud provider will assign an external IP, find it by looking for `tensorboard`:
# kubectl get svc -o wide
kind: Service
apiVersion: v1
metadata:
  name: tensorboard
spec:
  # magic line here. Only works on cloud providers
  type: LoadBalancer
  selector:
    type: tensorboard
  ports:
  - name: tensorboard
    protocol: TCP
    # port: where external request should go to
    port: 6006
    # targetPort is where the container listens internally
    targetPort: 6006

---
apiVersion: v1
kind: Pod
metadata:
  name: tensorboard
  labels:
    type: tensorboard
spec:
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet
  hostname: tensorboard
  subdomain: surreal
  restartPolicy: Never
  {{ volume_block() | indent(2) }}
  {{ tolerations_block | indent(2) }}
{% if AGENT_SELECTOR | length > 0 %}
  nodeSelector:
    {% for selector_key, selector_val in AGENT_SELECTOR.items() %}
    {{selector_key}}: {{selector_val}}
    {% endfor %}
{% endif %}
  containers:
  {{ container_block('tensorboard',
    AGENT_IMAGE,
    ["--cmd", TENSORBOARD_CMD],
    AGENT_RESOURCE_REQUEST,
    AGENT_RESOURCE_LIMIT)
    | indent(2) }}

